name: Deploy Flask App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps: 

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
  
    - name: Install Terraform
      run: |
        sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install terraform

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve
    
    - name: Wait for EC2 Instance to be ready
      run: |
        echo "Waiting for EC2 instance to be ready..."
        sleep 60
    
    - name: Extract EC2 Instance Public IP
      id: extract_ip
      run: |
          instance_ip=$(terraform output -raw ec2_instance_public_ip)
          echo "::set-output name=INSTANCE_IP::$instance_ip"
  
    - name: Install SSH client
      run: sudo apt-get install -y openssh-client 
  
    - name: Extract EC2 Instance ID
      id: extract_id
      run: |
        instance_id=$(terraform output -raw ec2_instance_id)
        echo "::set-output name=INSTANCE_ID::$instance_id"

    - name: Generate SSH Key
      env:
        SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY }}
        SSH_PUBLIC_KEY: ${{ secrets.DEPLOY_KEY_PUBLIC }}
      run: |
        echo "$SSH_PRIVATE_KEY" > ssh_private_key
        chmod 600 ssh_private_key
        echo "$SSH_PUBLIC_KEY" > ssh_public_key
        chmod 600 ssh_public_key

    - name: Install AWS CLI
      run: sudo apt-get install -y awscli

    - name: Ensure SSM Agent is Running
      env:
       INSTANCE_ID: ${{ steps.extract_id.outputs.INSTANCE_ID }}
      run: |
        # Polling for the SSM agent to be running on the EC2 instance
        instance_id="$INSTANCE_ID"  # Replace with your instance ID
        echo "$INSTANCE_ID"
        max_retries=30
        retry_count=0
        ssm_status=""

        while [ "$retry_count" -lt "$max_retries" ]; do
          ssm_status=$(aws ec2 describe-instance-status --instance-ids "$INSTANCE_ID" --query "InstanceStatuses[0].InstanceStatus.Status" --output text)
          if [ "$ssm_status" == "ok" ]; then
            echo "SSM Agent is running."
            break
          else
            echo "SSM Agent is not running. Retrying..."
            sleep 20
            ((retry_count++))
          fi
        done

        if [ "$retry_count" -ge "$max_retries" ]; then
          echo "SSM Agent did not start in time. Exiting."
          exit 1
        fi

    - name: Send SSH Key to EC2
      env:
        INSTANCE_ID: ${{ steps.extract_id.outputs.INSTANCE_ID }}
      run: |
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=instanceids,Values=$INSTANCE_ID" \
          --comment "Send SSH key to EC2 instance" \
          --parameters 'commands=["mkdir -p /home/ec2-user/.ssh", "echo \"$(<ssh_private_key)\" > /home/ec2-user/.ssh/id_rsa", "echo \"$(<ssh_public_key)\" > /home/ec2-user/.ssh/id_rsa.pub", "chmod 600 /home/ec2-user/.ssh/id_rsa", "chmod 644 /home/ec2-user/.ssh/id_rsa.pub", "chown ec2-user:ec2-user /home/ec2-user/.ssh/id_rsa", "chown ec2-user:ec2-user /home/ec2-user/.ssh/id_rsa.pub"]' \
          --timeout-seconds 60 \
          --max-concurrency "50" \
          --max-errors "0"
      
        
